// Generated by gencpp from file qt_connection/EgoPosRequest.msg
// DO NOT EDIT!


#ifndef QT_CONNECTION_MESSAGE_EGOPOSREQUEST_H
#define QT_CONNECTION_MESSAGE_EGOPOSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt_connection
{
template <class ContainerAllocator>
struct EgoPosRequest_
{
  typedef EgoPosRequest_<ContainerAllocator> Type;

  EgoPosRequest_()
    : x_req(0.0)
    , y_req(0.0)  {
    }
  EgoPosRequest_(const ContainerAllocator& _alloc)
    : x_req(0.0)
    , y_req(0.0)  {
  (void)_alloc;
    }



   typedef double _x_req_type;
  _x_req_type x_req;

   typedef double _y_req_type;
  _y_req_type y_req;





  typedef boost::shared_ptr< ::qt_connection::EgoPosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt_connection::EgoPosRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EgoPosRequest_

typedef ::qt_connection::EgoPosRequest_<std::allocator<void> > EgoPosRequest;

typedef boost::shared_ptr< ::qt_connection::EgoPosRequest > EgoPosRequestPtr;
typedef boost::shared_ptr< ::qt_connection::EgoPosRequest const> EgoPosRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt_connection::EgoPosRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt_connection::EgoPosRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qt_connection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt_connection::EgoPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt_connection::EgoPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt_connection::EgoPosRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6c19bf3803c700f7e253d9b425e76cd";
  }

  static const char* value(const ::qt_connection::EgoPosRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6c19bf3803c700fULL;
  static const uint64_t static_value2 = 0x7e253d9b425e76cdULL;
};

template<class ContainerAllocator>
struct DataType< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt_connection/EgoPosRequest";
  }

  static const char* value(const ::qt_connection::EgoPosRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_req\n\
float64 y_req\n\
";
  }

  static const char* value(const ::qt_connection::EgoPosRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_req);
      stream.next(m.y_req);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoPosRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt_connection::EgoPosRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt_connection::EgoPosRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_req: ";
    Printer<double>::stream(s, indent + "  ", v.x_req);
    s << indent << "y_req: ";
    Printer<double>::stream(s, indent + "  ", v.y_req);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT_CONNECTION_MESSAGE_EGOPOSREQUEST_H
